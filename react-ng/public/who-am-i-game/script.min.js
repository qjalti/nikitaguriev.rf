const characters=['Данила Багров', 'Шурик', 'Иван Васильевич', 'Кот Матроскин', 'Дед Мороз', 'Чебурашка', 'Карлсон', 'Антон Городецкий', 'Геннадий Букин', 'Шелдон Купер', 'Оксимирон', 'Моргенштерн', 'Виктор Цой', 'Юрий Дудь', 'Илон Маск', 'Ксения Собчак', 'Альбус Дамблдор']; let characterTimer; let revealTimer; let playerCount=0; let currentPlayer=1; let assignedCharacters=[]; let gameActive=!1; function initGame() {
  const e=document.getElementById('playerCount'); playerCount=parseInt(e.value), isNaN(playerCount)||playerCount<2?alert('Введите корректное число игроков (минимум 2)'):playerCount>characters.length?alert('Слишком много игроков. Максимум: '+characters.length):(assignedCharacters=shuffleArray(characters).slice(0, playerCount), document.getElementById('setup').classList.add('hidden'), document.getElementById('game').classList.remove('hidden'), gameActive=!0, updateTurnText());
} function updateTurnText() {
  document.getElementById('turnText').innerText=`Ход игрока ${currentPlayer}`, document.getElementById('characterName').innerText='', document.getElementById('timerText').innerText='', document.getElementById('showBtn').classList.remove('hidden'), document.getElementById('nextBtn').classList.add('hidden');
} function startShow() {
  document.getElementById('showBtn').classList.add('hidden'); let e=3; document.getElementById('timerText').innerText=`Показ через ${e} секунд...`, characterTimer=setInterval((()=>{
    e--, e>0?document.getElementById('timerText').innerText=`Показ через ${e} секунд...`:(clearInterval(characterTimer), revealCharacter());
  }), 1e3);
} function revealCharacter() {
  if (!gameActive) return; const e=assignedCharacters[currentPlayer-1]; document.getElementById('characterName').innerText=e; let t=59; document.getElementById('timerText').innerText=`Осталось времени: ${t} сек.`, document.getElementById('nextBtn').classList.remove('hidden'), revealTimer=setInterval((()=>{
    t--, t>0?document.getElementById('timerText').innerText=`Осталось времени: ${t} сек.`:(clearInterval(revealTimer), nextPlayer());
  }), 1e3);
} function skipToNext() {
  clearInterval(revealTimer), nextPlayer();
} function nextPlayer() {
  currentPlayer=currentPlayer%playerCount+1, updateTurnText();
} function endGame() {
  clearInterval(characterTimer), clearInterval(revealTimer), gameActive=!1, document.getElementById('game').classList.add('hidden'), document.getElementById('end').classList.remove('hidden');
} function restartGame() {
  location.reload();
} function shuffleArray(e) {
  const t=e.slice(); for (let e=t.length-1; e>0; e--) {
    const n=Math.floor(Math.random()*(e+1)); [t[e], t[n]]=[t[n], t[e]];
  } return t;
} function enterFullscreen() {
  const e=document.documentElement; e.requestFullscreen?e.requestFullscreen():e.webkitRequestFullscreen?e.webkitRequestFullscreen():e.msRequestFullscreen&&e.msRequestFullscreen();
}
